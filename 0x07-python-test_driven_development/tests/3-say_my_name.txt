===========================
Documentation for 3-say_my_name.py
===========================

This module defines a function that accepts two arguments ``first_name``
and ``last_name`` and then prints a string.

Usage:
=======

The ``say_my_name(...)`` function prints "My name is <first_name> <last_name>"

::
    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John", "Doe")
    My name is John Doe

From the definition of the function, ``last_name`` is optional and when not
provided, it is left blank

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John")
    My name is John 

If a string cast argument is passed for either the ``first_name`` or
``last_name`` it will be taken as a string and passed

::
    >>> say_my_name(str(["John", "Jane"]), "Doe")
    My name is ['John', 'Jane'] Doe

Invalid ``first_name`` or ``last_name``
==============================================

If the ``first_name`` and ``last_name`` are omitted, a TypeError is raised

::
    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

If the ``first_name`` is the only parameter and not a string datatype, a
TypeError exception is raised

::
    >>> say_my_name(12)
    Traceback (most recent call last):
    TypeError: first_name must be a string

If the ``first_name`` and ``last_name`` are provided and are not string
datatype, a TypeError exception is raised

::
    >>> say_my_name(12, 12)
    Traceback (most recent call last):
    TypeError: first_name must be a string

If a set, tuple, list, dictionary datastructure is passed in place of the
``first_name`` and/or ``last_name``, a TypeError exception will be raised.

::

    >>> say_my_name("John", ["Doe", "Drake"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

::
    >>> say_my_name(["John", "Jane"], "Doe")
    Traceback (most recent call last):
    TypeError: first_name must be a string
